/*
 * Copyright (c) 2016-2017 Scott Mitchell.
 * All rights reserved.
 *
 * Licenced under the BSD 3-Clause licence (the "Licence"); you may not use
 * this file except in compliance with the Licence. You may obtain a copy of
 * the Licence from the LICENCE file in the top level of this software
 * distribution or from:
 *
 *	 https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package rpi.blinkt;

using com.apamax.rpi.gpio.Setup;


/**
 * Helper event for the Blinkt Plugin, to control a Pimoroni Blinkt APA102
 * LED board from Apama EPL. Requires the Blinkt Plugin to be installed. It is
 * recommended to always use the helper event in your EPL code rather than
 * invoking the plugin directly.
 *
 * The Blinkt! is a strip of 8 APA102 RGB LED modules that can be attached to
 * the 40-pin GPIO connector on a Raspberry Pi Model B and controlled using a
 * simple two-wire SPI protocol. The BlinktPlugin software makes the Blinkt! 
 * accessible to Apama EPL developers through an EPL plugin and helper
 * object. The goal is to demonstrate how to straightforwardly integrate real
 * hardware with Apama and control it from EPL.
 *
 * Colour values for the Blinkt LEDs are RGB (red, green, blue) triplets with
 * a range of zero to 255. Values outside this range are handled by simply
 * using the least significant 8 bits of the integer as the colour value and
 * ignoring the rest.
 *
 * Intensity values for the Blinkt LEDs are floating point values with a range
 * of 0.0 to 1.0. Values less than zero will cause the intensity to be left
 * unchanged, although using the setRGB() or setAllRGB() actions is an easier
 * way to do this. Values greater than 1.0 are treated as though they were
 * 1.0, i.e. maximum intensity.
 *
 * The plugin keeps an internal colour/intensity state for each LED that is
 * only transferred to the real LEDs when the refresh() action is called. This
 * is the only way to change the state of the physical LEDs. The effects of
 * any number of preceding set*() and reset() calls will become visible only
 * when refresh() is called.
 *
 * @see <a href="https://github.com/pimoroni/blinkt">https://github.com/pimoroni/blinkt</a>
 * Blinkt! project on GitHub
 * @see <a href="https://cdn-shop.adafruit.com/product-files/2343/APA102C.pdf">https://cdn-shop.adafruit.com/product-files/2343/APA102C.pdf</a>
 * APA102 datasheet
 */
event BlinktHelper {

	import "BlinktPlugin" as blinkt;

	/**
	 * Set the colour of a Blinkt LED, leaving the intensity unchanged.
	 * This action just changes internal plugin state. Use the refresh()
	 * action to actually update the Blinkt LEDs. 
	 *
	 * @param led The LED number to set, starting from zero.
	 * @param red The red component of the RGB colour value.
	 * @param green The green component of the RGB colour value.
	 * @param blue The blue component of the RGB colour value.
	 */
	action setRGB(integer led, integer red, integer green, integer blue) {
		setRGBI(led, red, green, blue, -1.0);
	}

	/**
	 * Set the colour and intensity of a Blinkt LED. This action just
	 * changes internal plugin state. Use the refresh() action to actually
	 * update the Blinkt LEDs.
	 *
	 * @param led The LED number to set, starting from zero.
	 * @param red The red component of the RGB colour value.
	 * @param green The green component of the RGB colour value.
	 * @param blue The blue component of the RGB colour value.
	 * @param intensity The global intensity of the LED.
	 */
	action setRGBI(integer led, integer red, integer green, integer blue, float intensity) {
		blinkt.setLED(led, red, green, blue, intensity);
	}

	/**
	 * Set the intensity of a Blinkt LED, leaving the colour unchanged.
	 * This action just changes internal plugin state. Use the refresh()
	 * action to actually update the Blinkt LEDs.
	 *
	 * @param led The LED number to set, starting from zero.
	 * @param intensity The global intensity of the LED.
	 */
	action setI(integer led, float intensity) {
		blinkt.setIntensity(led, intensity);
	}

	/**
	 * Set the colour of all Blinkt LEDs, leaving the intensity unchanged.
	 * This action just changes internal plugin state. Use the refresh()
	 * action to actually update the Blinkt LEDs.
	 *
	 * @param red The red component of the RGB colour value.
	 * @param green The green component of the RGB colour value.
	 * @param blue The blue component of the RGB colour value.
	 */
	action setAllRGB(integer red, integer green, integer blue) {
		setAllRGBI(red, green, blue, -1.0);
	}

	/**
	 * Set the colour and intensity of all Blinkt LEDs. This action just
	 * changes internal plugin state. Use the refresh() action to actually
	 * update the Blinkt LEDs.
	 *
	 * @param red The red component of the RGB colour value.
	 * @param green The green component of the RGB colour value.
	 * @param blue The blue component of the RGB colour value.
	 * @param intensity The global intensity of the LEDs.
	 */
	action setAllRGBI(integer red, integer green, integer blue, float intensity) {
		blinkt.setAll(red, green, blue, intensity);
	}

	/**
	 * Set the intensity of all Blinkt LEDs, leaving the colour unchanged.
	 * This action just changes internal plugin state. Use the refresh()
	 * action to actually update the Blinkt LEDs.
	 *
	 * @param intensity The global intensity of the LEDs.
	 */
	action setAllI(float intensity) {
		blinkt.setIntensityAll(intensity);
	}

	/**
	 * Update all the Blinkt LEDs to match the internal colour and
	 * intensity state of the plugin, making the effects of all previous
	 * set*() calls visible.
	 */
	action refresh() {
		blinkt.refresh();
	}

	/**
	 * Set all Blinkt LEDs to no colour (red, green and blue all zero) and
	 * zero intensity. The refresh() action must be call to make the
	 * effects of a reset visible.
	 */
	action reset() {
		blinkt.reset();
	}

	/**
	 * Sleep (busy wait) for a specified time.
	 *
	 * @param millis The number of milliseconds to sleep for.
	 */
	action delay(integer millis) {
		blinkt.delay(millis);
	}

	/**
	 * Enable or disable debugging output from the plugin. When enabled,
	 * debug output is sent to stdout.
	 *
	 * @param enable True to enable debug output, false to disable it.
	 * @return The previous value of the debug flag.
	 */
	action enableDebug(boolean enable) returns boolean {
		return blinkt.enableDebug(enable);
	}

	/**
	 * Enable or disable reset of the Blinkt LEDs when the plugin is
	 * unloaded. If enabled, when the last plugin instance is unloaded it
	 * will attempt to reset and refresh the state of the Blinkt LEDs.
	 *
	 * @param enable True to enable reset on unload, false to disable it.
	 * @return The previous value of the reset-on-unload flag.
	 */
	action enableResetOnUnload(boolean enable) returns boolean {
		return blinkt.enableResetOnUnload(enable);
	}
}


/**
 * Monitor that exists only so that its onload() action can configure the
 * Raspberry Pi GPIO pins for the Blinkt LED board.
 *
 * Do not inject this monitor into the correlator more than once, as it will
 * probably cause the correlator to shut down immediately when attempting to
 * initialise the wiringPi library a second time.
 *
 * Requires the
 * <a href="http://www.apamacommunity.com/gpio-plugin-for-apama-core-community-edition-on-a-raspberry-pi/">GPIO plugin</a>
 * to be installed.
 */
monitor BlinktSetup {

	import "BlinktPlugin" as blinkt;

	action onload {
		// Configure the Blinkt pins.
		// We only want to do this once per correlator.
		(new Setup).setInputPins(new sequence<integer>).setOutputPins([blinkt.getDAT(), blinkt.getCLK()]).init();
		log "Blinkt initialised";
	}
}
