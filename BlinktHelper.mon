/*
 * Copyright (c) 2016-2020 Scott Mitchell.
 * All rights reserved.
 *
 * Licenced under the BSD 3-Clause licence (the "Licence"); you may not use
 * this file except in compliance with the Licence. You may obtain a copy of
 * the Licence from the LICENCE file in the top level of this software
 * distribution or from:
 *
 *	 https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package rpi.blinkt;

using com.apamax.rpi.gpio.Setup;


/**
 * Helper event for the Blinkt Plugin, to control a Pimoroni Blinkt! APA102C
 * LED board from Apama EPL. Requires the Blinkt Plugin to be installed. It is
 * recommended to always use the helper event in your EPL code rather than
 * invoking the plugin directly.
 *
 * The Blinkt! is a strip of 8 APA102C RGB LED modules that can be attached to
 * the 40-pin GPIO connector on a Raspberry Pi and controlled using a simple
 * two-wire SPI protocol. The <tt>BlinktPlugin</tt> software makes the Blinkt!
 * accessible to Apama EPL developers through an EPL plugin and helper object.
 * The goal is to demonstrate how to straightforwardly integrate real hardware
 * with Apama and control it from EPL.
 *
 * The APA102C LED modules used in the Blinkt! are controllable for both
 * colour and overall intensity or brightness. Colour values for the LEDs are
 * RGB (red, green, blue) triplets with a range of zero to 255 inclusive. The
 * plugin handles values outside this range by simply using the least
 * significant 8 bits of the integer as the colour value and ignoring the
 * rest.
 *
 * Intensity values for the LEDs are represented as floating point numbers
 * with a range of 0.0 to 1.0 inclusive. Values less than zero will cause the
 * intensity to be left unchanged, although using the <tt>setRGB()</tt> or
 * <tt>setAllRGB()</tt> actions on the helper object is an easier way to
 * change the colour of the LEDs without affecting the intensity. Values
 * greater than 1.0 are treated as though they were 1.0, i.e. maximum
 * intensity.
 *
 * The plugin keeps an internal colour/intensity state for each LED that is
 * only transferred to the real LEDs when the <tt>refresh()</tt> action is
 * called. This is the only way to change the state of the physical LEDs. The
 * effects of any number of preceding <tt>set*()</tt> and <tt>reset()</tt>
 * actions will become visible only when <tt>refresh()</tt> is called.
 *
 * @see <a href="https://shop.pimoroni.com/products/blinkt">https://shop.pimoroni.com/products/blinkt</a> Blinkt! product page
 * @see <a href="https://github.com/pimoroni/blinkt/">https://github.com/pimoroni/blinkt/</a> Blinkt! Python library GitHub project
 * @see <a href="https://pinout.xyz/pinout/blinkt">https://pinout.xyz/pinout/blinkt</a> Blinkt! pinout diagram
 * @see <a href="https://cdn-shop.adafruit.com/datasheets/APA102.pdf">https://cdn-shop.adafruit.com/datasheets/APA102.pdf</a> APA102C datasheet
 */
event BlinktHelper {

	import "BlinktPlugin" as blinkt;

	/**
	 * Set the colour of a Blinkt LED, leaving the intensity unchanged.
	 * This action just changes internal plugin state. Use the
	 * <tt>refresh()</tt> action to actually update the Blinkt LEDs. 
	 *
	 * @param led The LED number to set, starting from zero.
	 * @param red The red component of the RGB colour value.
	 * @param green The green component of the RGB colour value.
	 * @param blue The blue component of the RGB colour value.
	 */
	action setRGB(integer led, integer red, integer green, integer blue) {
		setRGBI(led, red, green, blue, -1.0);
	}

	/**
	 * Set the colour and intensity of a Blinkt LED. This action just
	 * changes internal plugin state. Use the <tt>refresh()</tt> action to
	 * actually update the Blinkt LEDs.
	 *
	 * @param led The LED number to set, starting from zero.
	 * @param red The red component of the RGB colour value.
	 * @param green The green component of the RGB colour value.
	 * @param blue The blue component of the RGB colour value.
	 * @param intensity The global intensity of the LED.
	 */
	action setRGBI(integer led, integer red, integer green, integer blue, float intensity) {
		blinkt.setLED(led, red, green, blue, intensity);
	}

	/**
	 * Set the intensity of a Blinkt LED, leaving the colour unchanged.
	 * This action just changes internal plugin state. Use the
	 * <tt>refresh()</tt> action to actually update the Blinkt LEDs.
	 *
	 * @param led The LED number to set, starting from zero.
	 * @param intensity The global intensity of the LED.
	 */
	action setI(integer led, float intensity) {
		blinkt.setIntensity(led, intensity);
	}

	/**
	 * Set the colour of all Blinkt LEDs, leaving the intensity unchanged.
	 * This action just changes internal plugin state. Use the
	 * <tt>refresh()</tt> action to actually update the Blinkt LEDs.
	 *
	 * @param red The red component of the RGB colour value.
	 * @param green The green component of the RGB colour value.
	 * @param blue The blue component of the RGB colour value.
	 */
	action setAllRGB(integer red, integer green, integer blue) {
		setAllRGBI(red, green, blue, -1.0);
	}

	/**
	 * Set the colour and intensity of all Blinkt LEDs. This action just
	 * changes internal plugin state. Use the <tt>refresh()</tt> action to
	 * actually update the Blinkt LEDs.
	 *
	 * @param red The red component of the RGB colour value.
	 * @param green The green component of the RGB colour value.
	 * @param blue The blue component of the RGB colour value.
	 * @param intensity The global intensity of the LEDs.
	 */
	action setAllRGBI(integer red, integer green, integer blue, float intensity) {
		blinkt.setAll(red, green, blue, intensity);
	}

	/**
	 * Set the intensity of all Blinkt LEDs, leaving the colour unchanged.
	 * This action just changes internal plugin state. Use the
	 * <tt>refresh()</tt> action to actually update the Blinkt LEDs.
	 *
	 * @param intensity The global intensity of the LEDs.
	 */
	action setAllI(float intensity) {
		blinkt.setIntensityAll(intensity);
	}

	/**
	 * Update all the Blinkt LEDs to match the internal colour and
	 * intensity state of the plugin, making the effects of all previous
	 * <tt>set*()</tt> calls visible.
	 */
	action refresh() {
		blinkt.refresh();
	}

	/**
	 * Set all Blinkt LEDs to no colour (red, green and blue all zero) and
	 * zero intensity. The <tt>refresh()</tt> action must be call to make the
	 * effects of a reset visible.
	 */
	action reset() {
		blinkt.reset();
	}

	/**
	 * Sleep (busy wait) for a specified time.
	 *
	 * @param millis The number of milliseconds to sleep for.
	 */
	action delay(integer millis) {
		blinkt.delay(millis);
	}

	/**
	 * Enable or disable debugging output from the plugin. When enabled,
	 * debug output is sent to <tt>stdout</tt>.
	 *
	 * @param enable True to enable debug output, false to disable it.
	 * @return The previous value of the debug flag.
	 */
	action enableDebug(boolean enable) returns boolean {
		return blinkt.enableDebug(enable);
	}

	/**
	 * Enable or disable reset of the Blinkt LEDs when the plugin is
	 * unloaded. If enabled, when the last plugin instance is unloaded it
	 * will attempt to reset and refresh the state of the Blinkt LEDs.
	 *
	 * @param enable True to enable reset on unload, false to disable it.
	 * @return The previous value of the reset-on-unload flag.
	 */
	action enableResetOnUnload(boolean enable) returns boolean {
		return blinkt.enableResetOnUnload(enable);
	}
}


/**
 * Monitor that exists only so that its <tt>onload()</tt> action can configure
 * the Raspberry Pi GPIO pins for the Blinkt LED board.
 *
 * Do not inject this monitor into the correlator more than once, as it will
 * probably cause the correlator to shut down immediately when attempting to
 * initialise the wiringPi library a second time.
 *
 * Requires the
 * <a href="https://github.com/CallumAttryde/apama_GPIO/">GPIO plugin</a>
 * to be installed.
 */
monitor BlinktSetup {

	import "BlinktPlugin" as blinkt;

	action onload {
		// Configure the Blinkt pins.
		// We only want to do this once per correlator.
		(new Setup).setInputPins(new sequence<integer>).setOutputPins([blinkt.getDAT(), blinkt.getCLK()]).init();
		log "Blinkt initialised";
	}
}
