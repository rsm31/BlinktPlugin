/*
 * Copyright (c) 2016-2017 Scott Mitchell.
 * All rights reserved.
 *
 * Licenced under the BSD 3-Clause licence (the "Licence"); you may not use
 * this file except in compliance with the Licence. You may obtain a copy of
 * the Licence from the LICENCE file in the top level of this software
 * distribution or from:
 *
 *	 https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

using rpi.blinkt.BlinktHelper;
using rpi.blinkt.BlinktRainbow;

monitor BlinktPlugin_004 {

	event Next { }

	BlinktHelper bh;
	BlinktRainbow br;
	context mainCtx := context.current();

	action onload {
		bh.reset();
		bh.refresh();

		// Start two different rainbows in separate contexts
		spawn step1() to context("forward");
		spawn step2() to context("reverse");
		step3();
	}

	action step1() {
		br.goForward(0, 4, 10.0, 100.0, 0.05);

		on wait(30.0) {
			log "Test step 1 complete";
			br.stop();
			send Next() to mainCtx;
		}
	}

	action step2() {
		br.goReverse(4, 4, 10.0, 150.0, 0.10);

		on wait(30.0) {
			log "Test step 2 complete";
			br.stop();
			send Next() to mainCtx;
		}
	}

	action step3() {
		// Wait for both rainbows to finish
		on (Next() and Next()) -> wait(10.0) {
			log "Test step 3 complete";
			bh.reset();
			bh.refresh();
			bh.delay(1000);
			// Start four rainbows in two contexts
			spawn step4() to context("forward");
			spawn step5() to context("reverse");
			spawn step6() to context("forward");
			spawn step7() to context("reverse");
			step8();
		}
	}

	action step4() {
		br.goForward(0, 2, 20.0, 100.0, 0.1);

		on wait(30.0) {
			log "Test step 4 complete";
			br.stop();
			send Next() to mainCtx;
		}
	}

	action step5() {
		br.goReverse(2, 2, 15.0, 150.0, 0.2);

		on wait(30.0) {
			log "Test step 5 complete";
			br.stop();
			send Next() to mainCtx;
		}
	}

	action step6() {
		br.goForward(4, 2, 10.0, 200.0, 0.3);

		on wait(30.0) {
			log "Test step 6 complete";
			br.stop();
			send Next() to mainCtx;
		}
	}

	action step7() {
		br.goReverse(6, 2, 5.0, 250.0, 0.4);

		on wait(30.0) {
			log "Test step 7 complete";
			br.stop();
			send Next() to mainCtx;
		}
	}

	action step8() {
		// Wait for all the rainbows to finish
		on (Next() and Next() and Next() and Next()) -> wait(10.0) {
			// Turn everything off and finish the test
			bh.reset();
			bh.refresh();
			log "Test step 8 complete";
			log "TEST COMPLETE";
		}
	}
}
